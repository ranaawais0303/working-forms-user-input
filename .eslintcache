[{"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\index.js":"1","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\App.js":"2","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\components\\SimpleInput.js":"3","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\hooks\\use-input.js":"4"},{"size":179,"mtime":1656679976863,"results":"5","hashOfConfig":"6"},{"size":168,"mtime":1656679976913,"results":"7","hashOfConfig":"6"},{"size":2367,"mtime":1656932989161,"results":"8","hashOfConfig":"6"},{"size":773,"mtime":1656932514794,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1glz22z",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\index.js",[],"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\App.js",[],"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\components\\SimpleInput.js",["20"],"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\hooks\\use-input.js",["21"],"import React, { useState } from \"react\";\r\nconst useInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n\r\n  //// input field handler on every keystroke\r\n  const valueChangeHandler = (e) => {\r\n    setEnteredValue(e.target.value);\r\n  };\r\n  //blur handler\r\n  const valueBlurHandler = (e) => {\r\n    setIsTouched(true);\r\n  };\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    valueBlurHandler,\r\n    reset,\r\n  };\r\n};\r\nexport default useInput;\r\n",["22","23"],{"ruleId":"24","severity":1,"message":"25","line":1,"column":17,"nodeType":"26","messageId":"27","endLine":1,"endColumn":25},{"ruleId":"24","severity":1,"message":"28","line":1,"column":8,"nodeType":"26","messageId":"27","endLine":1,"endColumn":13},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-global-assign","no-unsafe-negation"]