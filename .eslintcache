[{"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\index.js":"1","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\App.js":"2","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\components\\SimpleInput.js":"3","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\hooks\\use-input.js":"4","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\components\\BasicForm.js":"5"},{"size":179,"mtime":1656679976863,"results":"6","hashOfConfig":"7"},{"size":244,"mtime":1656933575000,"results":"8","hashOfConfig":"7"},{"size":2196,"mtime":1656936570290,"results":"9","hashOfConfig":"7"},{"size":773,"mtime":1656932514794,"results":"10","hashOfConfig":"7"},{"size":2945,"mtime":1656939376260,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1glz22z",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\index.js",[],"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\App.js",["25"],"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\components\\SimpleInput.js",["26"],"import React, { useState } from \"react\";\n\nimport useInput from \"../hooks/use-input\";\nconst SimpleInput = (props) => {\n  //for name\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  //for Email\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n  //form submit handler\n  const formSubmissionHandler = (e) => {\n    e.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    resetNameInput();\n    resetEmailInput();\n  };\n\n  //set style according to conditions\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  //jsx code logics\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be Empty</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">email must be valid </p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\hooks\\use-input.js",["27"],"import React, { useState } from \"react\";\r\nconst useInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n\r\n  //// input field handler on every keystroke\r\n  const valueChangeHandler = (e) => {\r\n    setEnteredValue(e.target.value);\r\n  };\r\n  //blur handler\r\n  const valueBlurHandler = (e) => {\r\n    setIsTouched(true);\r\n  };\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    valueBlurHandler,\r\n    reset,\r\n  };\r\n};\r\nexport default useInput;\r\n",["28","29"],"F:\\Skype session\\React_udemy\\working-forms-user-input\\src\\components\\BasicForm.js",[],{"ruleId":"30","severity":1,"message":"31","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":19},{"ruleId":"30","severity":1,"message":"34","line":1,"column":17,"nodeType":"32","messageId":"33","endLine":1,"endColumn":25},{"ruleId":"30","severity":1,"message":"35","line":1,"column":8,"nodeType":"32","messageId":"33","endLine":1,"endColumn":13},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'React' is defined but never used.","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-global-assign","no-unsafe-negation"]